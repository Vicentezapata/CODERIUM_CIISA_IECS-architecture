<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.workflow.cps.replay.ReplayFlowFactoryAction plugin="workflow-cps@2.90">
      <replacementLoadedScripts/>
    </org.jenkinsci.plugins.workflow.cps.replay.ReplayFlowFactoryAction>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>vzapata</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
        <entry>
          <org.jenkinsci.plugins.workflow.cps.replay.ReplayCause plugin="workflow-cps@2.90">
            <originalNumber>177</originalNumber>
          </org.jenkinsci.plugins.workflow.cps.replay.ReplayCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@2.19">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <jenkins.model.InterruptedBuildAction>
      <causes class="com.google.common.collect.ImmutableList">
        <jenkins.model.CauseOfInterruption_-UserInterruption>
          <user>vzapata</user>
        </jenkins.model.CauseOfInterruption_-UserInterruption>
      </causes>
    </jenkins.model.InterruptedBuildAction>
  </actions>
  <queueId>1</queueId>
  <timestamp>1626424443642</timestamp>
  <startTime>1626424443706</startTime>
  <result>ABORTED</result>
  <duration>56452</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>ABORTED</result>
    <script>node {
    env.REPO = &quot;https://github.com/Vicentezapata/IADSO_CIISA_IECS_REPO_TEST.git&quot;
    //VARIABLES DE ENTORNO
    env.DOCKER = tool &apos;docker&apos;;//Mismo nombre que pusimos // en el global tool configuration
    env.SONARSCANNER = tool &apos;sonarqube-scanner&apos;;//Mismo nombre que pusimos // en el global tool configuration
    env.DOCKER_EXEC = &quot;${DOCKER}/bin/docker&quot;;
    stage(&apos;Descargar Codigo (SCM)&apos;) {
        sh &quot;echo ${WORKSPACE}&quot;
        timeout(time: 3, unit: &apos;MINUTES&apos;){
            input = input(
            id: &apos;userInput&apos;, messasge: &apos;Valores para PMV&apos;,
            parameters: [
                string(description: &apos;Nombre del proyecto&apos;, name: &apos;Name_Project&apos;,defaultValue: &apos;IADSO_CIISA_IECS_REPO_TEST&apos;),
                string(description: &apos;Url de repositorio&apos;, name: &apos;Git_Url&apos;,defaultValue: &apos;https://github.com/Vicentezapata/IADSO_CIISA_IECS_REPO_TEST.git&apos;),
                choice(
                description: &apos;Tipo de repositorio&apos;,
                choices: [&apos;Publico&apos;, &apos;Privado&apos;],
                name: &apos;Type_Repo&apos;
                ),
                choice(
                description: &apos;Categorizacion&apos;,
                choices: [&apos;WEBPAGE&apos;, &apos;MOBILE&apos;],
                name: &apos;Type_Cat&apos;
                ),
                string(description: &apos;Correo del destinatario&apos;, name: &apos;Email&apos;,defaultValue: &apos;vicentezapatac@gmail.com&apos;)
            ]
            )
        }
        //VARIABLES DE PIPELINE
        env.PROJECT     = input.Name_Project.replace(&quot; &quot;,&quot;_&quot;)
        env.GITPROJECT  = input.Git_Url
        env.TYPEREPO    = input.Type_Repo
        env.CATEGORY    = input.Type_Cat
        env.EMAIL    = input.Email
        git input.Git_Url
    }
    stage(&apos;Control SAST&apos;) {
        // requires SonarQube Scanner 2.8+
        println &quot;**************************************************************************************************&quot;
        println &quot;*                                          SAST                                                  *&quot;
        println &quot;**************************************************************************************************&quot;
        println &quot;TOOL SONNAR-SCANNER: ${SONARSCANNER}&quot;
        withSonarQubeEnv(&apos;SonarQube&apos;) { // El nombre de servidor que //pusimos en Configuraci√≥n del sistema.
            sh &quot;${SONARSCANNER}/bin/sonar-scanner -Dsonar.projectKey=&apos;${PROJECT}&apos; -Dsonar.sources=. -Dsonar.java.binaries=.&quot;
        }
    }
    stage(&apos;Control IaC Security&apos;) {
        println &quot;**************************************************************************************************&quot;
        println &quot;*                                      IaC Security                                              *&quot;
        println &quot;**************************************************************************************************&quot;  
        
        println &quot;TOOL docker: ${DOCKER}&quot;
        if (env.CATEGORY.equals(&quot;WEBPAGE&quot;)){
            sh &apos;&apos;&apos;
                if [ $( ${DOCKER_EXEC} ps -a | grep  apache-app | wc -l ) -gt 0 ]; then
                    echo &apos;** Contenedor apache-app existente se procede a eliminar y volver a crear.&apos;
                    ${DOCKER_EXEC} rm -f apache-app
                    ${DOCKER_EXEC} run -dit --name apache-app -p 8085:80 -v &apos;/home/ciisa/Escritorio/Proyecto de titulo//jenkins-scripts/servidores_DAST/apache/&apos;:/usr/local/apache2/htdocs/ httpd:2.4
                else
                    ${DOCKER_EXEC} run -dit --name apache-app -p 8085:80 -v &apos;/home/ciisa/Escritorio/Proyecto de titulo//jenkins-scripts/servidores_DAST/apache/&apos;:/usr/local/apache2/htdocs/ httpd:2.4
                fi
            &apos;&apos;&apos;
        }
        sh &quot;${DOCKER_EXEC} pull aquasec/trivy:latest&quot;
        sh &quot;${DOCKER_EXEC} run --rm -v &apos;/home/ciisa/Escritorio/Proyecto de titulo/trivy/trivy-cache/&apos;:/root/.cache/ aquasec/trivy:latest httpd:2.4 &gt; &apos;/opt/scripts/OutputTrivy.txt&apos;&quot;
        sh &quot;${DOCKER_EXEC} run --rm -v &apos;/home/ciisa/Escritorio/Proyecto de titulo/trivy/trivy-cache/&apos;:/root/.cache/ aquasec/trivy:latest --format json httpd:2.4 &gt; &apos;/opt/scripts/OutputTrivyJson.txt&apos;&quot;
        sh &quot;rm -rf /opt/scripts/servidores_DAST/apache/${PROJECT}&quot;
        sh &quot;git clone ${REPO} /opt/scripts/servidores_DAST/apache/${PROJECT}&quot;
        println &quot;*************************************************************&quot; 
        println &quot;*************** Vulnerabilidades detectadas  ****************&quot; 
        println &quot;*************************************************************&quot; 
        sh &quot;cat /opt/scripts/OutputTrivy.txt&quot;
    }
    stage(&apos;Vulnerability Checks&apos;) {
        println &quot;**************************************************************************************************&quot;
        println &quot;*                                   Vulnerability Checks                                         *&quot;
        println &quot;**************************************************************************************************&quot; 
        println &quot;TOOL docker: ${DOCKER}&quot;
        //sh &quot;${DOCKER_EXEC} ps&quot;
        sh &quot;${DOCKER_EXEC} pull kanolato/rapidscan:latest&quot;
        sh &quot;${DOCKER_EXEC} run -t --rm -v /opt/scripts/reports_rapiscan:/reports kanolato/rapidscan http://localhost:8085/${PROJECT}/ &gt; &apos;/opt/scripts/OutputRapidscan.txt&apos;&quot;
        println &quot;*************************************************************&quot; 
        println &quot;*************** Vulnerabilidades detectadas  ****************&quot; 
        println &quot;*************************************************************&quot; 
        println &quot;Log no puede ser procesado favor mirar el informe PDF&quot; 
        //sh &quot;cat /opt/scripts/OutputRapidscan.txt&quot;
    }
    stage(&apos;Process Report&apos;) {
        println &quot;**************************************************************************************************&quot;
        println &quot;*                                   Procesando Reportes                                          *&quot;
        println &quot;**************************************************************************************************&quot; 
        sh &quot;rm ${WORKSPACE}/&apos;INFORME DE VULNERABILIDADES - ${PROJECT}.pdf&apos;&quot;
        sh &quot;java -jar /opt/scripts/api-sonarqube-report.jar admin ciisa2021 http://sonarqube:9000 /opt/scripts/OutputRapidscan.txt /opt/scripts/OutputTrivyJson.txt ${TYPEREPO} ${CATEGORY} ${GITPROJECT} ${PROJECT}&quot;
        sh &quot;cp ${WORKSPACE}/&apos;INFORME DE VULNERABILIDADES - ${PROJECT}.pdf&apos;	/opt/scripts/&quot;
    }
    stage(&apos;Send Report&apos;) {
        println &quot;**************************************************************************************************&quot;
        println &quot;*                                     Enviando Reportes                                          *&quot;
        println &quot;**************************************************************************************************&quot; 
        archiveArtifacts artifacts: &quot;INFORME DE VULNERABILIDADES - ${PROJECT}.pdf&quot;, onlyIfSuccessful: true
        def asunto = &quot;Analisis de Vulnerabilidades proyecto ${PROJECT}&quot;
        def para = &quot;${EMAIL}&quot;
        def cuerpo = &quot;Enlace de Ejecucion: ${BUILD_URL}\n&quot;
        cuerpo += &quot;Proyecto: ${PROJECT}\n&quot;
        cuerpo += &quot;Url repositorio: ${GITPROJECT}\n&quot;
        cuerpo += &quot;Tipo de repositorio: ${TYPEREPO}\n&quot;
        cuerpo += &quot;Categoria del repositorio: ${CATEGORY}\n&quot;
        cuerpo += &quot;Enlace de reporte: http://localhost:8081/job/PMV/168/artifact/INFORME DE VULNERABILIDADES - ${PROJECT}.pdf&quot;
        mail body: cuerpo, from: &quot;testvzapataciisa@gmail.com&quot;, subject: asunto, to: para
    }
}</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>382355483</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>79279515703</long>
      </entry>
      <entry>
        <string>run</string>
        <long>7795576741</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>43512169198</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>1167545889</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>3</iota>
    <head>1:3</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>