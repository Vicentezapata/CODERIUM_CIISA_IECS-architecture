<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@2.40">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>vzapata</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@2.19">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.workflow.support.steps.input.InputAction plugin="pipeline-input-step@2.12">
      <ids class="java.util.concurrent.CopyOnWriteArrayList"/>
    </org.jenkinsci.plugins.workflow.support.steps.input.InputAction>
    <jenkins.model.InterruptedBuildAction>
      <causes class="com.google.common.collect.ImmutableList">
        <org.jenkinsci.plugins.workflow.support.steps.input.Rejection plugin="pipeline-input-step@2.12">
          <userName>SYSTEM</userName>
          <timestamp>1620795321199</timestamp>
        </org.jenkinsci.plugins.workflow.support.steps.input.Rejection>
      </causes>
    </jenkins.model.InterruptedBuildAction>
  </actions>
  <queueId>143</queueId>
  <timestamp>1620795140792</timestamp>
  <startTime>1620795140795</startTime>
  <result>ABORTED</result>
  <duration>180546</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>ABORTED</result>
    <script>node {
  stage(&apos;Descargar Codigo (SCM)&apos;) {
    timeout(time: 3, unit: &apos;MINUTES&apos;){
      input = input(
        id: &apos;userInput&apos;, messasge: &apos;Valores para PMV&apos;,
        parameters: [
          string(description: &apos;Nombre del proyecto&apos;, name: &apos;nameProject&apos;),
          string(description: &apos;Url de repositorio&apos;, name: &apos;gitUrl&apos;),
          choice(
            description: &apos;Tipo de repositorio&apos;,
            choices: [&apos;Publico&apos;, &apos;Privado&apos;],
            name: &apos;typeRepo&apos;
          )
        ]
      )
    }
    git input.gitUrl
  }

  stage(&apos;Control SAST&apos;) {
    // requires SonarQube Scanner 2.8+
    def scannerHome = tool &apos;sonarqube-scanner&apos;;//Mismo nombre que pusimos // en el global tool configuration
    withSonarQubeEnv(&apos;SonarQube&apos;) { // El nombre de servidor que //pusimos en Configuraci√≥n del sistema.
      sh &quot;${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=&apos;&quot;+input.nameProject.replace(&quot; &quot;,&quot;_&quot;)+&quot;&apos; -Dsonar.sources=. -Dsonar.java.binaries=.&quot;
    }
  }
}</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>111097530</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>98698339</long>
      </entry>
      <entry>
        <string>run</string>
        <long>367669652</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>168191116</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>100242976</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>16</iota>
    <head>1:16</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>